#!/system/bin/sh
gov(){
	echo "Cores 1/2 Governor selection:"
	echo
	governors=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d')
	# Load text file lines into a bash array & print as a menu.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $governors; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/gov=/d' /$extsd/plaintweak
	sed -i '/gov=/d' /vendor/overlay/local.prop
	if [ "$input" != "0" ];then
	gov=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d' | head -n $input | tail -n 1)
	echo 'gov='$gov >> /$extsd/plaintweak
	echo 'gov='$gov >> /vendor/overlay/local.prop
	fi
clear
}
gov2(){
	echo "Cores 3/4 Governor selection:"
	echo
	governors=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d')
	# Load text file lines into a bash array & print as a menu.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $governors; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/gov2=/d' /$extsd/plaintweak
	sed -i '/gov2=/d' /vendor/overlay/local.prop
	if [ "$input" != "0" ];then
	gov=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d' | head -n $input | tail -n 1)
	echo 'gov2='$gov >> /$extsd/plaintweak
	echo 'gov2='$gov >> /vendor/overlay/local.prop
	fi
clear
}
minkhz(){
	echo "Cores 1/2 Min CPU Clock selection:"
	echo 
	frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4)
	# Load text file lines into a bash array.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $frequencies; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/minkhz=/d' /vendor/overlay/local.prop
	sed -i '/minkhz=/d' /$extsd/plaintweak
	if [ "$input" != "0" ];then
	minkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4 | head -n $input | tail -n 1)
	echo 'minkhz='$minkhz >> /$extsd/plaintweak
	echo 'minkhz='$minkhz >> /vendor/overlay/local.prop
	fi
clear
}
minkhz2(){
	echo "Cores 3/4 Min CPU Clock selection:"
	echo 
	frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4)
	# Load text file lines into a bash array.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $frequencies; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/minkhz2=/d' /vendor/overlay/local.prop
	sed -i '/minkhz2=/d' /$extsd/plaintweak
	if [ "$input" != "0" ];then
	minkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4 | head -n $input | tail -n 1)
	echo 'minkhz2='$minkhz >> /$extsd/plaintweak
	echo 'minkhz2='$minkhz >> /vendor/overlay/local.prop
	fi
clear
}
maxkhz(){
	echo "Cores 1/2 Max CPU Clock selection:"
	echo 
	frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5)
	# Load text file lines into a bash array.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $frequencies; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/maxkhz=/d' /vendor/overlay/local.prop
	sed -i '/maxkhz=/d' /$extsd/plaintweak
	if [ "$input" != "0" ];then
	maxkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5 | head -n $input | tail -n 1)
	echo 'maxkhz='$maxkhz >> /$extsd/plaintweak
	echo 'maxkhz='$maxkhz >> /vendor/overlay/local.prop
	fi
clear
}
maxkhz2(){
	echo "Cores 3/4 Max CPU Clock selection:"
	echo 
	frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5)
	# Load text file lines into a bash array.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $frequencies; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/maxkhz2=/d' /vendor/overlay/local.prop
	sed -i '/maxkhz2=/d' /$extsd/plaintweak
	if [ "$input" != "0" ];then
	maxkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5 | head -n $input | tail -n 1)
	echo 'maxkhz2='$maxkhz >> /$extsd/plaintweak
	echo 'maxkhz2='$maxkhz >> /vendor/overlay/local.prop
	fi
clear
}
scheduler(){
echo "IO Scheduler selection:"
echo 
schedulers=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed 's/ /\n/g' | sed '$d')
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $schedulers; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 = default or 99 = exit]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
if [ "$input" != "0" ];then
scheduler=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed 's/ /\n/g' | sed '$d' | sed 's/ //g' | head -n $input | tail -n 1)
echo 'scheduler='$scheduler >> /$extsd/plaintweak
sed -i '/scheduler=/d' /vendor/overlay/local.prop
echo 'scheduler='$scheduler >> /vendor/overlay/local.prop
fi
clear
}
tcpcong(){
echo "TCP Congestion Control selection:"
echo 
tcpcong=$(cat /proc/sys/net/ipv4/tcp_available_congestion_control | sed 's/ /\n/g')
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $tcpcong; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 = default or 99 = exit]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
sed -i '/tcpcong=/d' /vendor/overlay/local.prop
sed -i '/tcpcong=/d' /$extsd/plaintweak
if [ "$input" != "0" ];then
tcpcong=$(cat /proc/sys/net/ipv4/tcp_available_congestion_control | sed 's/ /\n/g' | head -n $input | tail -n 1)
echo 'tcpcong='$tcpcong >> /$extsd/plaintweak
echo 'tcpcong='$tcpcong >> /vendor/overlay/local.prop
fi
}
kernelconfig() {
	if [ -e /sdcard/plaintweak ]; then
	DATE=$(date +"%m"-"%d"-"%y")
	mkdir -p /sdcard/plain-tweak/$DATE
	mv /sdcard/plaintweak /sdcard/plain-tweak/$DATE/plaintweak
	fi
	case "$2" in
		maxkhz)
			maxkhz extsd='sdcard'
			;;
		maxkhz2)
			maxkhz2 extsd='sdcard'
			;;
		minkhz)
			minkhz extsd='sdcard'
			;;
		minkhz2)
			minkhz2 extsd='sdcard'
			;;
		gov)
			gov extsd='sdcard'
			;;
		gov2)
			gov2 extsd='sdcard'
			;;
		scheduler)
			scheduler extsd='sdcard'
			;;
		tcpcong)
			tcpcong extsd='sdcard'
			;;
		*)
			"Exiting: Invalid input"
			;;
	esac
}
backupbuildprop() {
	cp /system/build.prop /system/.build.prop-original
}
restorebuildprop() {
	cp /system/.build.prop-original /system/build.prop
}
restoreplaintweakconfig() {
	mkdir -p /system/vendor/overlay
	cat /sdcard/plaintweak > /system/vendor/overlay/local.prop
	cat /sdcard/customdensity >> /system/vendor/overlay/local.prop
	echo 'enable_plaintweak=1' >> /system/vendor/overlay/local.prop
	chmod 0755 /system/vendor/overlay/local.prop
}
bootanim() {
	case "$setbootanim" in
	enable)
		sed -i -e '/debug.sf.nobootanimation=1/d' /vendor/overlay/local.prop
		if [ -e /tmp/recovery.log ]; then
		echo "Enabled boot animations from Aroma" >> /tmp/recovery.log
		else
		echo -n '\03 Build-Prop Tweaks\0 Enabled boot animations\0' > /dev/log/main
		sysro
		fi
		echo "Enabled boot animations"
	;;
	disable)
		echo "debug.sf.nobootanimation=1" >> /vendor/overlay/local.prop
		if [ -e /tmp/recovery.log ]; then
		echo "Disabled boot animations from Aroma" >> /tmp/recovery.log
		else
		echo -n '\03 Build-Prop Tweaks\0 Disabled boot animations\0' > /dev/log/main
		sysro
		fi
		echo "Disabled boot animations"
	;;
	esac
}
density() {
	case "$setdensity" in
		stock)
		rm /sdcard/customdensity
		if [ -e /tmp/recovery.log ]; then
		echo $setdensity" is density obtained from Aroma" >> /tmp/recovery.log
		else
		echo -n '\03 Build-Prop Tweaks\0 Set '$customdensity' as new custom density\0' > /dev/log/main
		fi
		if [ ! -e /tmp/recovery.log ]; then
		sysro
		fi
		;;
		*)
		echo 'customdensity='$setdensity > /sdcard/customdensity
		if [ -e /tmp/recovery.log ]; then
		echo $setdensity" is density obtained from Aroma" >> /tmp/recovery.log
		else
		echo -n '\03 Build-Prop Tweaks\0 Set '$customdensity' as new custom density\0' > /dev/log/main
		fi
		if [ ! -e /tmp/recovery.log ]; then
		sysro
		fi
		;;
	esac
}
if [ ! -e /tmp/recovery.log ]; then
sysrw
fi
case "$1" in
  density)
    setdensity=$2
    density
  ;;
  bootanim)
    setbootanim=$2
    bootanim
  ;;
  backupbuildprop)
    backupbuildprop
  ;;
  restorebuildprop)
    restorebuildprop
  ;;
  kernelconfig)
	configselection=$2
	if [ -z "$configselection" ]; then
    maxkhz extsd='sdcard'
	maxkhz2 extsd='sdcard'
	minkhz extsd='sdcard'
	minkhz2 extsd='sdcard'
	gov extsd='sdcard'
	gov2 extsd='sdcard'
	scheduler extsd='sdcard'
	tcpcong extsd='sdcard'
	else
	kernelconfig
	fi
  ;;
  restoreplaintweakconfig)
	restoreplaintweakconfig
  ;;
esac
