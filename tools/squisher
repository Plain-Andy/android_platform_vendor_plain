#!/bin/bash
#
# Squish a CM otapackage for distribution
#
# cyanogen
# AOKP
clear
if [ -z "$AROMA_BUILD" ]
then
AROMA_BUILD=$1
fi

. $ANDROID_BUILD_TOP/vendor/plain/tools/colors

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5="md5 -r "
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e "ERROR: $0 only works with a full build environment. $OUT should exist."
	exit 1
fi

# out/ dir defined elsewhere
if [ ! -z $OUT_DIR_COMMON_BASE ]; then
	TREE_NAME=`basename $ANDROID_BUILD_TOP`
	OUT_DIR=$OUT_DIR_COMMON_BASE/$TREE_NAME
else
	OUT_DIR=$ANDROID_BUILD_TOP/out
fi

OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-eng.$USER.zip

if [ ! -f "$OTAPACKAGE" ]; then
	echo -e "$OTAPACKAGE doesn't exist!";
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/plain/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"


# Some products want a squashfs for xbin for space
case "$TARGET_PRODUCT" in
	cyanogen_dream_sapphire) WANT_SQUASHFS=1 ;;
	*) WANT_SQUASHFS=0 ;;
esac

if [ "$WANT_SQUASHFS" -eq 1 ]; then
	fatal=0
	MKSQUASHFS_VER_REQ=4
	if type mksquashfs >/dev/null 2>&1; then
		if mksquashfs -version | grep -q "version $MKSQUASHFS_VER_REQ"; then :; else
			echo -e
			echo -e $CL_RED"ERROR: mksquashfs must be at least version $MKSQUASHFS_VER_REQ for this build."$CL_RST
			fatal=1
		fi
	else
		echo -e
		echo -e $CL_RED"ERROR: $TARGET_PRODUCT requires mksquashfs."$CL_RST
		fatal=1
	fi

	if [ "$fatal" -ne 0 ]; then
		echo -e
		echo -e $CL_YLW"       Unoptimized package is still available at"
		echo -e "         $OTAPACKAGE"$CL_RST
		exit $fatal
	fi
fi

REPACK=$OUT/repack.d
echo -e $CL_CYN"Sanitizing environment..."$CL_RST
rm -rf $REPACK
mkdir -p $REPACK
echo -e


# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
echo -e $CL_CYN"Unpacking $OTAPACKAGE..."$CL_RST
unzip $QUIET $OTAPACKAGE
echo -e

# Add weekly changelog
if [ -n "$BUILDTYPE_RELEASE" ]
then
echo -e $CL_CYN"Injecting release changelog... "$CL_RST
. $ANDROID_BUILD_TOP/vendor/plain/utils/changelog_gen.sh $(date -d "1 month ago" '+%m-%d-%Y') > /dev/null
cp $OUT/CHANGELOG.txt $REPACK/ota/system/etc/CHANGELOG.txt
else
echo -e $CL_CYN"Injecting weekly changelog... "$CL_RST
. $ANDROID_BUILD_TOP/vendor/plain/utils/changelog_gen.sh $(date -d "1 week ago" '+%m-%d-%Y') > /dev/null
cp $OUT/CHANGELOG.txt $REPACK/ota/system/etc/CHANGELOG.txt
fi
# Add Aroma
if [ -n "$AROMA_BUILD" ]
then
echo -e $CL_GRN"Unpacking Aroma..."$CL_RST
AROMADATE=$(date +"%Y-%m-%d")
mv $REPACK/ota/META-INF/com/google/android/update-binary $REPACK/ota/META-INF/com/google/android/update-binary-installer
unzip $QUIET -o $ANDROID_BUILD_TOP/vendor/plain/tools/aroma/aroma.zip
if [ -e $OUT/aroma-device-script ]
then
cd $REPACK/ota/META-INF/com/google/android/
cp $OUT/aroma-device-script $REPACK/ota/META-INF/com/google/android/aroma-device-script
awk '/# @AROMA_DEVICE_SCRIPT@/{system("cat aroma-device-script");next}1' $REPACK/ota/META-INF/com/google/android/updater-script > $REPACK/ota/META-INF/com/google/android/temp
rm $REPACK/ota/META-INF/com/google/android/updater-script
mv $REPACK/ota/META-INF/com/google/android/temp $REPACK/ota/META-INF/com/google/android/updater-script
rm $REPACK/ota/META-INF/com/google/android/aroma-device-script
fi
cp $ANDROID_BUILD_TOP/vendor/plain/tools/aroma/aroma-script $REPACK/ota/META-INF/com/google/android/aroma-script
cd $REPACK/ota/META-INF/com/google/android/
sed 's.<b><p>.<b><@center>.g' $ANDROID_BUILD_TOP/Changelog_$(date +"%m_%d_%Y").htm | sed 's.</p></b>.</b></@>.g' | sed 's.<p>.<*>.g' | sed 's.</p>.</*>.g' > ./aroma/changelog.txt
awk '/# @AROMASCRIPT@/{system("cat aroma-script");next}1' $REPACK/ota/META-INF/com/google/android/updater-script > $REPACK/ota/META-INF/com/google/android/temp
rm $REPACK/ota/META-INF/com/google/android/updater-script
mv $REPACK/ota/META-INF/com/google/android/temp $REPACK/ota/META-INF/com/google/android/updater-script
rm $REPACK/ota/META-INF/com/google/android/aroma-script
AROMA_MODEL=`sed -n -e'/ro\.product\.model/s/^.*=//p' $OUT/system/build.prop`
AROMA_MANUFACTURER=`sed -n -e'/ro\.product\.brand/s/^.*=//p' $OUT/system/build.prop`
AROMA_DEVICE="$AROMA_MANUFACTURER $AROMA_MODEL"
cp $ANDROID_BUILD_TOP/vendor/plain/tools/aroma/aroma-config $REPACK/ota/META-INF/com/google/android/aroma-config
if [ -e $OUT/aroma-device-config ]
then
cp $OUT/aroma-device-config $REPACK/ota/META-INF/com/google/android/aroma-device-config
awk '/#@AROMA_DEVICE_CONFIG@/{system("cat aroma-device-config");next}1' $REPACK/ota/META-INF/com/google/android/aroma-config > $REPACK/ota/META-INF/com/google/android/temp
rm $REPACK/ota/META-INF/com/google/android/aroma-config
mv $REPACK/ota/META-INF/com/google/android/temp $REPACK/ota/META-INF/com/google/android/aroma-config
rm $REPACK/ota/META-INF/com/google/android/aroma-device-config
mkdir -p $REPACK/ota/aroma_device
cp -R $OUT/aroma_device/* $REPACK/ota/aroma_device
fi
sed -i -e "s|@AROMA_DEVICE@|$AROMA_DEVICE|" $REPACK/ota/META-INF/com/google/android/aroma-config
sed -i -e "s|@DATE@|$AROMADATE|" $REPACK/ota/META-INF/com/google/android/aroma-config
echo
fi


# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel
cp $REPACK/ota/system/framework/framework-res.apk .
cp $REPACK/ota/system/app/*.apk .

# Do optimization in parallel
find ./ -name \*.apk | $XARGS $OPTICHARGER

# Move optimized apks to repack directory
mv -f $REPACK/parallel/framework-res.apk $REPACK/ota/system/framework/framework-res.apk
mv -f $REPACK/parallel/*.apk $REPACK/ota/system/app/

# Optimize /priv-app/
cp $REPACK/ota/system/priv-app/*.apk .
find ./ -name \*.apk | $XARGS $OPTICHARGER
mv -f $REPACK/parallel/*.apk $REPACK/ota/system/priv-app/

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel
)

# Fix build.prop
$SED -i \
        -e '/ro\.kernel\.android\.checkjni/d' \
        -e '/ro\.build\.type/s/eng/user/' \
        $REPACK/ota/system/build.prop

# Determine what to name the new signed package

MODVERSION=Plain-Andy-`sed -n -e'/ro\.plain\.version/s/^.*=//p' $OUT/system/build.prop`-`sed -n -e'/rom\.buildtype/s/^.*=//p' $OUT/system/build.prop` 
if [ -n "$BUILDTYPE_RELEASE" ]
then
MODVERSION=Release-`sed -n -e'/ro\.plain\.version/s/^.*=//p' $OUT/system/build.prop`
fi
TARGET_PRODUCT_FINAL=`echo -e $TARGET_PRODUCT | cut -d '_' -f2`
echo -e $CL_CYN"MODVERSION: $MODVERSION"$CL_RST
OUTFILE=$OUT/$MODVERSION.zip

# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo -e $DELETE_BINS | xargs rm -f; )

# Delete unnecessary libraries
( cd $REPACK/ota/system/lib; echo -e $DELETE_LIBS | xargs rm -f; )

# Delete Offline charging mode files
( cd $REPACK/ota/system/media; echo -e $DELETE_MEDIA | xargs rm -f; )

if [ "$TARGET_PRODUCT_FINAL" != "infuse4g" ]
then
# No need for modem.bin
rm -f $REPACK/ota/modem.bin
fi

# No need for media/video
rm -rf $REPACK/ota/system/media/video

# Delete Unnecessary Fonts
( cd $REPACK/ota/system/fonts; echo -e $DELETE_FONTS | xargs rm -f; )

# No need for tts
rm -rf $REPACK/ota/system/tts

# No need for srec
rm -rf $REPACK/ota/system/usr/srec

# No need for recovery
rm -rf $REPACK/ota/recovery
rm -rf $REPACK/ota/system/etc/recovery-resource.dat

# Strip modules
[ -d $REPACK/ota/system/lib/modules ] && \
        find $REPACK/ota/system/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

# Pack it up and sign
printf "Zipping package..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )

echo
echo -e $CL_CYN"Signing package..."$CL_RST
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
        -jar $OUT/../../../host/$OUT_TARGET_HOST/framework/signapk.jar \
        -w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
        $REPACK/update.zip $OUTFILE
echo -e
printf "Cleaning up..."
rm -rf $REPACK
echo -e

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5
echo -e
echo -e $CL_GRN"Package complete: $OUTFILE"$CL_RST
echo -e $CL_GRN"md5: $(cat $img.md5 | awk '{ print $1 }')"$CL_RST
echo -e
)

exit 0
